# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/api/v1/comments', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Comment. As you add validations to Comment, be sure to
  # adjust the attributes here as well.

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # CommentsController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) do
    {}
  end

  let(:user) { create(:user) }

  describe 'GET /index' do
    it 'renders a successful response' do
      get api_v1_comments_url, headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      new_comment = create(:comment, user: user)
      get api_v1_comment_url(new_comment), as: :json
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      let(:user) { create(:user) }
      let(:recipe) { create(:recipe) }
      let(:new_comment) { build(:comment, user: user, recipe: recipe) }

      it 'creates a new Comment' do
        expect do
          post api_v1_comments_url,
               params: { comment: new_comment }, headers: valid_headers, as: :json
        end.to change(Comment, :count).by(1)
      end

      it 'renders a JSON response with the new comment' do
        post api_v1_comments_url,
             params: { comment: new_comment }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end

    context 'with invalid parameters' do
      let(:bad_comment) { build(:comment, recipe: nil, user: nil) }

      it 'does not create a new Comment' do
        expect do
          post api_v1_comments_url,
               params: { comment: bad_comment }, as: :json
        end.to change(Comment, :count).by(0)
      end

      it 'renders a JSON response with errors for the new comment' do
        post api_v1_comments_url,
             params: { comment: bad_comment }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:comment) { create(:comment, content: 'Original Content') }
      let(:new_comment) { comment }

      it 'updates the requested comment' do
        new_comment.content = 'New Content'
        patch api_v1_comment_url(comment),
              params: { comment: new_comment }, headers: valid_headers, as: :json
        comment.reload
        expect(comment.content).to eq('New Content')
      end

      it 'renders a JSON response with the comment' do
        new_comment.content = 'New Content'
        patch api_v1_comment_url(comment),
              params: { comment: new_comment }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end

    context 'with invalid parameters' do
      let(:comment) { create(:comment) }
      let(:new_comment) { comment }

      it 'renders a JSON response with errors for the comment' do
        new_comment.content = nil
        patch api_v1_comment_url(comment),
              params: { comment: new_comment }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested comment' do
      comment = create(:comment)
      expect do
        delete api_v1_comment_url(comment), headers: valid_headers, as: :json
      end.to change(Comment, :count).by(-1)
    end
  end
end
